{"ast":null,"code":"var _jsxFileName = \"/Users/harrinicole/Documents/GitHub/card-crunch-game/src/App.js\",\n  _s = $RefreshSig$();\n// Import the 'useState' hook from the 'react' module and CSS files\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\n// Define an array of objects that contains the image sources for the memory cards\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/butterfly.png\",\n  matched: false\n}, {\n  \"src\": \"/img/flower.png\",\n  matched: false\n}, {\n  \"src\": \"/img/moon.png\",\n  matched: false\n}, {\n  \"src\": \"/img/moth.png\",\n  matched: false\n}, {\n  \"src\": \"/img/timer.png\",\n  matched: false\n}, {\n  \"src\": \"/img/unicorn.png\",\n  matched: false\n}];\n\n// Define the main App component\nfunction App() {\n  _s();\n  // Define two state variables: 'cards' to store the shuffled cards and 'turns' to store the number of turns taken\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  // Define a function that shuffles the 'cardImages' array, duplicates it, assigns a random ID to each card, and sets the resulting array as the new state of 'cards'\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages] // Duplicate the array\n    .sort(() => Math.random() - 0.5) // Shuffle the array randomly\n    .map(card => ({\n      ...card,\n      id: Math.random()\n    })); // Assign a random ID to each card object\n\n    // Set the shuffled cards and reset the number of turns to 0\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  // Handle a choice\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  //Compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // Reset choices and increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  // Render the App component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enchanted Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n// Export the App component as the default export of this module\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SingleCard","jsxDEV","_jsxDEV","cardImages","matched","App","_s","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","prevTurns","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/harrinicole/Documents/GitHub/card-crunch-game/src/App.js"],"sourcesContent":["// Import the 'useState' hook from the 'react' module and CSS files\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\n// Define an array of objects that contains the image sources for the memory cards\nconst cardImages = [\n    { \"src\": \"/img/butterfly.png\", matched: false },\n    { \"src\": \"/img/flower.png\", matched: false },\n    { \"src\": \"/img/moon.png\", matched: false },\n    { \"src\": \"/img/moth.png\", matched: false },\n    { \"src\": \"/img/timer.png\", matched: false },\n    { \"src\": \"/img/unicorn.png\", matched: false },\n]\n\n// Define the main App component\nfunction App() {\n    // Define two state variables: 'cards' to store the shuffled cards and 'turns' to store the number of turns taken\n    const [cards, setCards] = useState([])\n    const [turns, setTurns] = useState(0)\n    const [choiceOne, setChoiceOne] = useState(null)\n    const [choiceTwo, setChoiceTwo] = useState(null)\n\n    // Define a function that shuffles the 'cardImages' array, duplicates it, assigns a random ID to each card, and sets the resulting array as the new state of 'cards'\n    const shuffleCards = () => {\n        const shuffledCards = [...cardImages, ...cardImages] // Duplicate the array\n        .sort(() => Math.random() - 0.5) // Shuffle the array randomly\n        .map((card) => ({ ...card, id: Math.random() })) // Assign a random ID to each card object\n\n        // Set the shuffled cards and reset the number of turns to 0\n        setCards(shuffledCards)\n        setTurns(0)\n    }\n\n    // Handle a choice\n    const handleChoice = (card) => {\n        choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n    }\n\n    //Compare 2 selected cards\n    useEffect(() => {\n        if (choiceOne && choiceTwo) {\n            if (choiceOne.src === choiceTwo.src) {\n                setCards(prevCards => {\n                    return prevCards.map(card => {\n                        if (card.src === choiceOne.src) {\n                            return {...card, matched: true}\n                        } else {\n                            return card\n                        }\n                    })\n                })\n                resetTurn()\n            } else {\n                resetTurn()\n            }\n        }\n    }, [choiceOne, choiceTwo])\n\n    // Reset choices and increase turn\n    const resetTurn = () => {\n        setChoiceOne(null)\n        setChoiceTwo(null)\n        setTurns(prevTurns => prevTurns + 1)\n    }\n\n    // Render the App component\n    return (\n        <div className=\"App\">\n            <h1>Enchanted Match</h1>\n            <button onClick={shuffleCards}>New Game</button>\n\n            <div className=\"card-grid\">\n                {cards.map(card => (\n                    <SingleCard\n                        key={card.id}\n                        card={card}\n                        handleChoice={handleChoice}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\n// Export the App component as the default export of this module\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}